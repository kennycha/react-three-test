{"version":3,"sources":["lib/getRandomColor.js","components/Box.js","components/Circle.js","components/Cone.js","components/Cylinder.js","components/Dodecahedron.js","components/Heart.js","components/Icosahedron.js","components/Lathe.js","components/Octahedron.js","components/Parametric.js","components/Plane.js","components/Cube.js","components/Ring.js","components/ShapeLine.js","components/Sphere.js","components/Tetrahedron.js","components/Torus.js","components/TorusKnot.js","components/Tube.js","components/Edges.js","components/Wireframe.js","index.js"],"names":["getRandomColor","Math","round","random","Box","props","mesh","useRef","useFrame","current","rotation","x","y","ref","scale","args","color","side","DoubleSide","Circle","Cone","Cylinder","Dodecahedron","Heart","shape","Shape","moveTo","bezierCurveTo","geometry","ExtrudeBufferGeometry","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelSegments","Icosahedron","Lathe","points","i","push","Vector2","sin","LatheBufferGeometry","Octahedron","Parametric","ParametricBufferGeometry","v","u","target","z","PI","cos","set","multiplyScalar","Plane","Cube","PolyhedronBufferGeometry","Ring","ShapeLine","heartShape","ShapeBufferGeometry","Sphere","Tetrahedron","Torus","TorusKnot","Tube","path","t","tx","ty","Vector3","this","Curve","TubeBufferGeometry","Edges","edges","EdgesGeometry","BoxBufferGeometry","Wireframe","wireframe","WireframeGeometry","ReactDOM","render","position","document","getElementById"],"mappings":"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","file":"static/js/main.44e1af1a.chunk.js","sourcesContent":["const getRandomColor = () => Math.round(Math.random() * 10000000);\n\nexport default getRandomColor;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Box;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Circle(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <circleBufferGeometry args={[1, 32]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Circle;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Cone(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <coneBufferGeometry args={[1, 1, 32]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Cone;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Cylinder(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <cylinderBufferGeometry args={[1, 1, 1, 32]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Cylinder;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Dodecahedron(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <dodecahedronBufferGeometry args={[1]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Dodecahedron;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide, ExtrudeBufferGeometry, Shape } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Heart(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const shape = new Shape();\n  const x = -2.5;\n  const y = -5;\n  shape.moveTo(x + 2.5, y + 2.5);\n  shape.bezierCurveTo(x + 2.5, y + 2.5, x + 2, y, x, y);\n  shape.bezierCurveTo(x - 3, y, x - 3, y + 3.5, x - 3, y + 3.5);\n  shape.bezierCurveTo(x - 3, y + 5.5, x - 1.5, y + 7.7, x + 2.5, y + 9.5);\n  shape.bezierCurveTo(x + 6, y + 7.7, x + 8, y + 4.5, x + 8, y + 3.5);\n  shape.bezierCurveTo(x + 8, y + 3.5, x + 8, y, x + 5, y);\n  shape.bezierCurveTo(x + 3.5, y, x + 2.5, y + 2.5, x + 2.5, y + 2.5);\n\n  const extrudeSettings = {\n    steps: 2,\n    depth: 2,\n    // 사각(bevel)을 주어 깎아냄\n    bevelEnabled: true,\n    bevelThickness: 1,\n    bevelSize: 1,\n    bevelSegments: 2,\n  };\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.15, 0.15, 0.15]}\n      geometry={new ExtrudeBufferGeometry(shape, extrudeSettings)}\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Heart;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Icosahedron(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <icosahedronBufferGeometry args={[1]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Icosahedron;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide, LatheBufferGeometry, Vector2 } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Lathe(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const points = [];\n  for (let i = 0; i < 10; ++i) {\n    points.push(new Vector2(Math.sin(i * 0.2) * 3 + 3, (i - 5) * 0.8));\n  }\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.15, 0.15, 0.15]}\n      geometry={new LatheBufferGeometry(points)}\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Lathe;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Octahedron(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <octahedronBufferGeometry args={[1]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Octahedron;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide, ParametricBufferGeometry } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Parametric(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  function klein(v, u, target) {\n    u *= Math.PI;\n    v *= 2 * Math.PI;\n    u = u * 2;\n\n    let x;\n    let z;\n\n    if (u < Math.PI) {\n      x =\n        3 * Math.cos(u) * (1 + Math.sin(u)) +\n        2 * (1 - Math.cos(u) / 2) * Math.cos(u) * Math.cos(v);\n      z =\n        -8 * Math.sin(u) -\n        2 * (1 - Math.cos(u) / 2) * Math.sin(u) * Math.cos(v);\n    } else {\n      x =\n        3 * Math.cos(u) * (1 + Math.sin(u)) +\n        2 * (1 - Math.cos(u) / 2) * Math.cos(v + Math.PI);\n      z = -8 * Math.sin(u);\n    }\n\n    const y = -2 * (1 - Math.cos(u) / 2) * Math.sin(v);\n\n    target.set(x, y, z).multiplyScalar(0.75);\n  }\n  const slices = 25;\n  const stacks = 25;\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.15, 0.15, 0.15]}\n      geometry={new ParametricBufferGeometry(klein, slices, stacks)}\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Parametric;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Plane(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <planeBufferGeometry args={[1.5, 1.5, 2, 2]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Plane;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide, PolyhedronBufferGeometry } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Cube(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n  const verticesOfCube = [\n    -1,\n    -1,\n    -1,\n    1,\n    -1,\n    -1,\n    1,\n    1,\n    -1,\n    -1,\n    1,\n    -1,\n    -1,\n    -1,\n    1,\n    1,\n    -1,\n    1,\n    1,\n    1,\n    1,\n    -1,\n    1,\n    1,\n  ];\n  const indicesOfFaces = [\n    2,\n    1,\n    0,\n    0,\n    3,\n    2,\n    0,\n    4,\n    7,\n    7,\n    3,\n    0,\n    0,\n    1,\n    5,\n    5,\n    4,\n    0,\n    1,\n    2,\n    6,\n    6,\n    5,\n    1,\n    2,\n    3,\n    7,\n    7,\n    6,\n    2,\n    4,\n    5,\n    6,\n    6,\n    7,\n    4,\n  ];\n  const radius = 7;\n  const detail = 2;\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.15, 0.15, 0.15]}\n      geometry={\n        new PolyhedronBufferGeometry(\n          verticesOfCube,\n          indicesOfFaces,\n          radius,\n          detail\n        )\n      }\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Cube;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Ring(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <ringBufferGeometry args={[0.5, 1, 18]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Ring;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide, Shape, ShapeBufferGeometry } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction ShapeLine(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const x = 0,\n    y = 0;\n\n  const heartShape = new Shape();\n\n  heartShape.moveTo(x + 5, y + 5);\n  heartShape.bezierCurveTo(x + 5, y + 5, x + 4, y, x, y);\n  heartShape.bezierCurveTo(x - 6, y, x - 6, y + 7, x - 6, y + 7);\n  heartShape.bezierCurveTo(x - 6, y + 11, x - 3, y + 15.4, x + 5, y + 19);\n  heartShape.bezierCurveTo(x + 12, y + 15.4, x + 16, y + 11, x + 16, y + 7);\n  heartShape.bezierCurveTo(x + 16, y + 7, x + 16, y, x + 10, y);\n  heartShape.bezierCurveTo(x + 7, y, x + 5, y + 5, x + 5, y + 5);\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.1, 0.1, 0.1]}\n      geometry={new ShapeBufferGeometry(heartShape)}\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default ShapeLine;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Sphere(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <sphereBufferGeometry args={[1, 18]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Sphere;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Tetrahedron(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[1, 1, 1]}>\n      <tetrahedronBufferGeometry args={[1]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Tetrahedron;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Torus(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[0.7, 0.7, 0.7]}>\n      <torusBufferGeometry args={[1, 0.5, 10, 10]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Torus;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { DoubleSide } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction TorusKnot(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  return (\n    <mesh {...props} ref={mesh} scale={[0.6, 0.6, 0.6]}>\n      <torusKnotBufferGeometry args={[1, 0.5, 20, 40, 2, 3]} />\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default TorusKnot;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { Curve, DoubleSide, TubeBufferGeometry, Vector3 } from \"three\";\nimport getRandomColor from \"../lib/getRandomColor\";\n\nfunction Tube(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  class CustomSinCurve extends Curve {\n    constructor(scale) {\n      super();\n      this.scale = scale;\n    }\n    getPoint(t) {\n      const tx = t * 3 - 1.5;\n      const ty = Math.sin(2 * Math.PI * t);\n      const tz = 0;\n      return new Vector3(tx, ty, tz).multiplyScalar(this.scale);\n    }\n  }\n\n  const path = new CustomSinCurve(4);\n  const tubularSegments = 20;\n  const radius = 1;\n  const radialSegments = 8;\n  const closed = false;\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={[0.2, 0.2, 0.2]}\n      geometry={\n        new TubeBufferGeometry(\n          path,\n          tubularSegments,\n          radius,\n          radialSegments,\n          closed\n        )\n      }\n    >\n      <meshPhongMaterial color={getRandomColor()} side={DoubleSide} />\n    </mesh>\n  );\n}\n\nexport default Tube;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { BoxBufferGeometry, EdgesGeometry } from \"three\";\n\nfunction Edges(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const width = 2;\n  const height = 2;\n  const depth = 2;\n  const thresholdAngle = 30;\n\n  const edges = new EdgesGeometry(\n    new BoxBufferGeometry(width, height, depth),\n    thresholdAngle\n  );\n\n  return (\n    <lineSegments\n      {...props}\n      ref={mesh}\n      scale={[0.7, 0.7, 0.7]}\n      geometry={edges}\n    >\n      <lineBasicMaterial color=\"#000000\" />\n    </lineSegments>\n  );\n}\n\nexport default Edges;\n","import React, { useRef } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport { BoxBufferGeometry, WireframeGeometry } from \"three\";\n\nfunction Wireframe(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  const width = 2;\n  const height = 2;\n  const depth = 2;\n\n  const wireframe = new WireframeGeometry(\n    new BoxBufferGeometry(width, height, depth)\n  );\n\n  return (\n    <lineSegments\n      {...props}\n      ref={mesh}\n      scale={[0.7, 0.7, 0.7]}\n      geometry={wireframe}\n    >\n      <lineBasicMaterial color=\"#000000\" />\n    </lineSegments>\n  );\n}\n\nexport default Wireframe;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport { Canvas } from \"react-three-fiber\";\nimport \"./index.css\";\nimport Box from \"./components/Box\";\nimport Circle from \"./components/Circle\";\nimport Cone from \"./components/Cone\";\nimport Cylinder from \"./components/Cylinder\";\nimport Dodecahedron from \"./components/Dodecahedron\";\nimport Heart from \"./components/Heart\";\nimport Icosahedron from \"./components/Icosahedron\";\nimport Lathe from \"./components/Lathe\";\nimport Octahedron from \"./components/Octahedron\";\nimport Parametric from \"./components/Parametric\";\nimport Plane from \"./components/Plane\";\nimport Cube from \"./components/Cube\";\nimport Ring from \"./components/Ring\";\nimport ShapeLine from \"./components/ShapeLine\";\nimport Sphere from \"./components/Sphere\";\nimport Tetrahedron from \"./components/Tetrahedron\";\nimport Torus from \"./components/Torus\";\nimport TorusKnot from \"./components/TorusKnot\";\nimport Tube from \"./components/Tube\";\nimport Edges from \"./components/Edges\";\nimport Wireframe from \"./components/Wireframe\";\n\nReactDOM.render(\n  <Canvas>\n    <ambientLight />\n    <pointLight position={[-1, 2, 4]} />\n    <pointLight position={[1, -2, -4]} />\n    <Box position={[-6, 5, -4]} />\n    <Circle position={[-3, 5, -4]} />\n    <Cone position={[0, 5, -4]} />\n    <Cylinder position={[3, 5, -4]} />\n    <Dodecahedron position={[6, 5, -4]} />\n    <Heart position={[-6, 2.5, -4]} />\n    <Icosahedron position={[-3, 2.5, -4]} />\n    <Lathe position={[0, 2.5, -4]} />\n    <Octahedron position={[3, 2.5, -4]} />\n    <Parametric position={[6, 2.5, -4]} />\n    <Plane position={[-6, 0, -4]} />\n    <Cube position={[-3, 0, -4]} />\n    <Ring position={[0, 0, -4]} />\n    <ShapeLine position={[3, 0, -4]} />\n    <Sphere position={[6, 0, -4]} />\n    <Tetrahedron position={[-6, -2.5, -4]} />\n    <Torus position={[0, -2.5, -4]} />\n    <TorusKnot position={[3, -2.5, -4]} />\n    <Tube position={[6, -2.5, -4]} />\n    <Edges position={[-2, -5, -4]} />\n    <Wireframe position={[2, -5, -4]} />\n  </Canvas>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}